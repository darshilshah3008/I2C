name: CI (Fast checks + CCS build)

on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]

jobs:
  fast_checks:
    name: Fast compile & static checks (hosted)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install ARM GCC + tools
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-arm-none-eabi binutils-arm-none-eabi cppcheck

      - name: Compile all .c to .o (no linking, fail on warnings)
        run: |
          set -e
          for f in $(git ls-files '*.c'); do
            echo "Compiling $f"
            arm-none-eabi-gcc \
              -mcpu=cortex-m4 -mthumb -mfpu=fpv4-sp-d16 -mfloat-abi=hard \
              -O2 -g3 -Wall -Wextra -Werror \
              -DPART_TM4C123GH6PM -I. \
              -c "$f" -o "${f%.c}.o"
          done
          echo "Objects built:" > $GITHUB_STEP_SUMMARY
          ls -1 **/*.o | tee -a $GITHUB_STEP_SUMMARY

      - name: Cppcheck (static analysis)
        run: |
          cppcheck --enable=warning,style,performance,portability --error-exitcode=1 \
                   --inline-suppr --std=c11 -I . $(git ls-files '*.c')

      - name: Upload .o artifacts
        uses: actions/upload-artifact@v4
        with:
          name: objects
          path: "**/*.o"

  ccs_build:
    name: CCS build (.out + .hex/.hx1) on self-hosted Windows
    runs-on: self-hosted
    # Remove "needs" if you want both jobs to run fully independently
    needs: [fast_checks]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Import CCS project into temp workspace
        shell: cmd
        env:
          CCS: C:\ti\ccs1220\ccs
          WS:  ${{ github.workspace }}\_ccs_ws
          PROJ_DIR: ${{ github.workspace }}
        run: |
          if not exist "%WS%" mkdir "%WS%"
          "%CCS%\eclipse\eclipsec.exe" -noSplash -data "%WS%" ^
            -application com.ti.ccstudio.apps.projectImport ^
            -ccs.projects "%PROJ_DIR%"

      - name: Build project (Debug)
        shell: cmd
        env:
          CCS: C:\ti\ccs1220\ccs
          WS:  ${{ github.workspace }}\_ccs_ws
        run: |
          "%CCS%\eclipse\eclipsec.exe" -noSplash -data "%WS%" ^
            -application com.ti.ccstudio.apps.projectBuild ^
            -ccs.build all -ccs.configuration Debug

      - name: Create HEX/HX1 from OUT
        shell: cmd
        env:
          OUT_DIR: ${{ github.workspace }}\Debug
          TOOLS:   C:\ti\ccs1220\ccs\tools\compiler\ti-cgt-arm_20.2.7.LTS\bin
        run: |
          for %%F in ("%OUT_DIR%\*.out") do (
            "%TOOLS%\armhex.exe" -o "%%~dpnF.hex" "%%F"
            copy /Y "%%~dpnF.hex" "%%~dpnF.hx1" >NUL
          )

      - name: Upload firmware artifacts
        uses: actions/upload-artifact@v4
        with:
          name: firmware-ccs
          path: |
            **/Debug/*.out
            **/Debug/*.map
            **/Debug/*.hex
            **/Debug/*.hx1
