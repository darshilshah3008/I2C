name: CCS Build (self-hosted, TI toolchain only)

on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]

jobs:
  ccs_build:
    name: Build with CCS (Debug) and publish .out/.hex/.hx1
    runs-on: self-hosted   # Your Windows runner with CCS installed
    env:
      # ðŸ”§ Update these paths if your CCS version/path differs
      CCS: C:\ti\ccs1220\ccs
      TOOLS: C:\ti\ccs1220\ccs\tools\compiler\ti-cgt-arm_20.2.7.LTS\bin
      WS: ${{ github.workspace }}\_ccs_ws     # temporary CCS workspace
      PROJ_DIR: ${{ github.workspace }}        # project root in repo
      CFG: Debug                               # or Release if you prefer
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Prepare CCS workspace
        shell: cmd
        run: |
          if exist "%WS%" rmdir /s /q "%WS%"
          mkdir "%WS%"

      - name: Import CCS project
        shell: cmd
        run: |
          "%CCS%\eclipse\eclipsec.exe" -noSplash -data "%WS%" ^
            -application com.ti.ccstudio.apps.projectImport ^
            -ccs.projects "%PROJ_DIR%"

      - name: Build CCS project (%CFG%)
        shell: cmd
        run: |
          "%CCS%\eclipse\eclipsec.exe" -noSplash -data "%WS%" ^
            -application com.ti.ccstudio.apps.projectBuild ^
            -ccs.configuration %CFG% -ccs.build all

      - name: Make HEX / HX1 from OUT
        shell: cmd
        run: |
          for %%F in ("%PROJ_DIR%\%CFG%\*.out") do (
            "%TOOLS%\armhex.exe" -o "%%~dpnF.hex" "%%F"
            copy /Y "%%~dpnF.hex" "%%~dpnF.hx1" >NUL
          )

      - name: Upload firmware artifacts
        uses: actions/upload-artifact@v4
        with:
          name: firmware-ccs-${{ github.run_number }}
          path: |
            **\%CFG%\*.out
            **\%CFG%\*.map
            **\%CFG%\*.hex
            **\%CFG%\*.hx1
